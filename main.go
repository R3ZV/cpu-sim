package main

import (
	"sim/core"
	"sim/cpu"
	"sim/log"
	"sim/sched"

	"fmt"
	"math"
)

func addJobs(workload *[][]core.Proc) {
	sched.FCFSJobs(workload)
	sched.SJFJobs(workload)
	sched.PSJFJobs(workload)
	sched.PriorityJobs(workload)
	sched.RMJobs(workload)
}

// We are going to make the assumption that all the jobs
// are generated by the first 2 processes in the jobs list.
// To make sure that we can compute de jobs we are going to use
// the following formula: sum(burst[i] / period[i]) < (2^(1 / n) - 1) * n
// Where n is the number of generating processes (in this case 2)
// And i goes from [0, n) (in this case from [0, 1) )
func canBeComputed(jobs []core.Proc) bool {
	lhs := float64(jobs[0].Burst) / float64(jobs[0].Period)
	lhs += float64(jobs[1].Burst) / float64(jobs[1].Period)

	rhs := 2*math.Sqrt(2) - 2
	return lhs < rhs
}

func main() {
	schedAlgs := []sched.Scheduler{
		sched.NewFCFS("FCFS"),
		sched.NewSJF("SJF"),
		sched.NewPSJF("PSJF"),
		sched.NewPriority("Priority"),
		sched.NewRM("RM"),
		sched.NewEDF("EDF"),
		// sched.NewSJF("RR"),
	}

	workload := [][]core.Proc{}
	addJobs(&workload)

	for _, algo := range schedAlgs {
		fmt.Printf("Testing %s\n", algo.GetName())
		fmt.Println("============")
		for i, jobs := range workload {
			cpu := cpu.NewCPU(algo)
			fmt.Printf("Workload %d:\n", i)
			if algo.IsRealTime() && !canBeComputed(jobs) {
				log.Debug("This workload can't be computed with: %s:\n", algo.GetName())
				fmt.Printf("Usage: %.2f%%\n", 0.00)
				fmt.Printf("Turnaround time: %.2f\n", 0.00)
				fmt.Printf("Response time: %.2f\n", 0.00)
				fmt.Printf("Waiting time: %.2f\n", 0.00)
				continue
			}

			procIdx := 0
			for !cpu.IsDone() || procIdx < len(jobs) {
				for procIdx < len(jobs) && jobs[procIdx].Arrive == cpu.GetTimer() {
					cpu.AddProc(jobs[procIdx])
					procIdx += 1
				}

				cpu.Tick()
			}

			log.Assert(cpu.Procs.Len() == 0, "CPU hasn't finished its jobs")

			fmt.Printf("Usage: %.2f%%\n", cpu.Usage())
			fmt.Printf("Turnaround time: %.2f\n", cpu.TurnaroundTime())
			fmt.Printf("Response time: %.2f\n", cpu.ResponseTime())
			fmt.Printf("Waiting time: %.2f\n", cpu.WaitTime())
			fmt.Printf("\n")
		}

	}
}
